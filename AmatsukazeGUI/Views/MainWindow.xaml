<Window x:Class="Amatsukaze.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        Title="{Binding WindowCaption, Mode=OneWay}" Height="350" Width="525">

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="FromMain">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="MainWindowAction">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>
    
    <Window.Resources>

        <DataTemplate DataType="{x:Type vm:LogFileViewModel}">
            <v:LogFilePanel />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ConsoleViewModel}">
            <v:ConsolePanel />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SettingPanelViewModel}">
            <v:SettingPanel />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:QueueViewModel}">
            <v:QueuePanel />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:LogViewModel}">
            <v:LogPanel />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:DiskFreeSpaceViewModel}">
            <v:DiskFreeSpacePanel />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SummaryViewModel}">
            <v:SummaryPanel />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ClientLogViewModel}">
            <v:ClientLogPanel />
        </DataTemplate>

    </Window.Resources>
    
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.RowSpan="3" >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <ListBox Style="{StaticResource HeaderMenuStyle}" ItemsSource="{Binding MainPanelMenu}" SelectedIndex="{Binding MainPanelSelectedIndex, Mode=TwoWay}" />
            <ContentControl Grid.Row="1" Content="{Binding MainPanel}" />
        </Grid>

        <Grid Grid.Column="2" >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <ListBox Style="{StaticResource HeaderMenuStyle}" ItemsSource="{Binding ConsolePanelMenu}" SelectedIndex="{Binding ConsolePanelSelectedIndex, Mode=TwoWay}" />
            <ContentControl Grid.Row="1" Content="{Binding ConsolePanel}" />
        </Grid>

        <Grid Grid.Column="2" Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <ListBox Style="{StaticResource HeaderMenuStyle}" ItemsSource="{Binding InfoPanelMenu}" SelectedIndex="{Binding InfoPanelSelectedIndex, Mode=TwoWay}" />
            <ContentControl Grid.Row="1" Content="{Binding InfoPanel}" />
        </Grid>

        <GridSplitter HorizontalAlignment="Center" Grid.RowSpan="3" Grid.Column="1" Width="5" ResizeDirection="Columns"/>
        <GridSplitter VerticalAlignment="Center" Grid.Row="1" Grid.Column="2" Height="5" ResizeDirection="Rows" HorizontalAlignment="Stretch"/>

        <Grid Grid.Row="4" Grid.ColumnSpan="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Button Width="50" Content="更新" Command="{Binding RefreshCommand, Mode=OneWay}" HorizontalAlignment="Left" />
            <Button Width="50" Content="接続先" Command="{Binding ChangeServerCommand, Mode=OneWay}" Margin="50,0,0,0" />
            <TextBlock Text="{Binding Model.CurrentOperationResult}" Margin="10,0" Grid.Column="1" VerticalAlignment="Center"/>
            <TextBlock Text="{Binding RunningState}" Grid.Column="2" Width="60" TextAlignment="Center" VerticalAlignment="Center" />
            <Button Content="一時停止" Grid.Column="3" Command="{Binding TogglePauseCommand, Mode=OneWay}" Width="65">
                <Button.Template>
                    <ControlTemplate TargetType="Button">
                        <Border BorderThickness="0.5" BorderBrush="Gray" CornerRadius="5" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Button.Template>
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Foreground" Value="#FFA4A4A4"/>
                        <Setter Property="Background" Value="White"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Model.IsPaused}" Value="True">
                                <Setter Property="Foreground" Value="Black"/>
                                <Setter Property="Background" Value="Yellow"/>
                                <Setter Property="FontWeight" Value="Bold"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>
    </Grid>
</Window>
